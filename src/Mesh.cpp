#include "Mesh.h"
#include <ostream>

size_t Mesh::AddVertex(float x, float y, float z) {
	verts.push_back(vertex{x, y, z});
	return verts.size() - 1;
}

void Mesh::AddFace(size_t v1, size_t v2, size_t v3) {
	faces.push_back(triangle{v1, v2, v3});
}

void Mesh::AddFaceColor(uint8_t r, uint8_t g, uint8_t b) {
	facesColor.push_back(RGB{ r, g, b, 0xFF });
}
void Mesh::AddVertColor(uint8_t r, uint8_t g, uint8_t b) {
	vertsColor.push_back(RGB{ r, g, b, 0xFF });
}

void Mesh::WriteOff(std::ostream &out) {
	out << std::fixed;
	out << "OFF\n";
	// verts, faces, edges
	out << verts.size() << ' ' << faces.size() << " 0\n";
	for (auto &v : verts) {
		out << v.x << ' ' << v.y << ' ' << v.z << '\n';
	}
	for (auto &f : faces) {
		out << "3 " << f.v1 << ' ' << f.v2 << ' ' << f.v3 << '\n';
	}
}

void Mesh::WriteOffColor(std::ostream& out) {
	out << std::fixed;
	out << "COFF\n";
	// verts, faces, edges
	out << verts.size() << ' ' << faces.size() << " 0\n";
	for (int i = 0; i < verts.size();i++) {
		out << verts[i].x<< ' ' << verts[i].y << ' ' << verts[i].z  << '\n';
	}
	
	for (size_t i = 0; i < faces.size();i++) {
		out << "3 " << faces[i].v1 
			<< ' ' << faces[i].v2 
			<< ' ' << faces[i].v3 
			<< ' ' << static_cast<int>(facesColor[i].red) 
			<< ' ' << static_cast<int>(facesColor[i].green) 
			<< ' ' << static_cast<int>(facesColor[i].blue) << '\n';
	}
	
}
// Shamelessly stolen from exercise 2.
int8_t triTable[256][16] = {
		{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  8,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  1,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  8,  3,  9,  8,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  2,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  8,  3,  1,  2,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{9,  2,  10, 0,  2,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{2,  8,  3,  2,  10, 8,  10, 9,  8,  -1, -1, -1, -1, -1, -1, -1},
		{3,  11, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  11, 2,  8,  11, 0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  9,  0,  2,  3,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  11, 2,  1,  9,  11, 9,  8,  11, -1, -1, -1, -1, -1, -1, -1},
		{3,  10, 1,  11, 10, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  10, 1,  0,  8,  10, 8,  11, 10, -1, -1, -1, -1, -1, -1, -1},
		{3,  9,  0,  3,  11, 9,  11, 10, 9,  -1, -1, -1, -1, -1, -1, -1},
		{9,  8,  10, 10, 8,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{4,  7,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{4,  3,  0,  7,  3,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  1,  9,  8,  4,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{4,  1,  9,  4,  7,  1,  7,  3,  1,  -1, -1, -1, -1, -1, -1, -1},
		{1,  2,  10, 8,  4,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{3,  4,  7,  3,  0,  4,  1,  2,  10, -1, -1, -1, -1, -1, -1, -1},
		{9,  2,  10, 9,  0,  2,  8,  4,  7,  -1, -1, -1, -1, -1, -1, -1},
		{2,  10, 9,  2,  9,  7,  2,  7,  3,  7,  9,  4,  -1, -1, -1, -1},
		{8,  4,  7,  3,  11, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{11, 4,  7,  11, 2,  4,  2,  0,  4,  -1, -1, -1, -1, -1, -1, -1},
		{9,  0,  1,  8,  4,  7,  2,  3,  11, -1, -1, -1, -1, -1, -1, -1},
		{4,  7,  11, 9,  4,  11, 9,  11, 2,  9,  2,  1,  -1, -1, -1, -1},
		{3,  10, 1,  3,  11, 10, 7,  8,  4,  -1, -1, -1, -1, -1, -1, -1},
		{1,  11, 10, 1,  4,  11, 1,  0,  4,  7,  11, 4,  -1, -1, -1, -1},
		{4,  7,  8,  9,  0,  11, 9,  11, 10, 11, 0,  3,  -1, -1, -1, -1},
		{4,  7,  11, 4,  11, 9,  9,  11, 10, -1, -1, -1, -1, -1, -1, -1},
		{9,  5,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{9,  5,  4,  0,  8,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  5,  4,  1,  5,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{8,  5,  4,  8,  3,  5,  3,  1,  5,  -1, -1, -1, -1, -1, -1, -1},
		{1,  2,  10, 9,  5,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{3,  0,  8,  1,  2,  10, 4,  9,  5,  -1, -1, -1, -1, -1, -1, -1},
		{5,  2,  10, 5,  4,  2,  4,  0,  2,  -1, -1, -1, -1, -1, -1, -1},
		{2,  10, 5,  3,  2,  5,  3,  5,  4,  3,  4,  8,  -1, -1, -1, -1},
		{9,  5,  4,  2,  3,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  11, 2,  0,  8,  11, 4,  9,  5,  -1, -1, -1, -1, -1, -1, -1},
		{0,  5,  4,  0,  1,  5,  2,  3,  11, -1, -1, -1, -1, -1, -1, -1},
		{2,  1,  5,  2,  5,  8,  2,  8,  11, 4,  8,  5,  -1, -1, -1, -1},
		{10, 3,  11, 10, 1,  3,  9,  5,  4,  -1, -1, -1, -1, -1, -1, -1},
		{4,  9,  5,  0,  8,  1,  8,  10, 1,  8,  11, 10, -1, -1, -1, -1},
		{5,  4,  0,  5,  0,  11, 5,  11, 10, 11, 0,  3,  -1, -1, -1, -1},
		{5,  4,  8,  5,  8,  10, 10, 8,  11, -1, -1, -1, -1, -1, -1, -1},
		{9,  7,  8,  5,  7,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{9,  3,  0,  9,  5,  3,  5,  7,  3,  -1, -1, -1, -1, -1, -1, -1},
		{0,  7,  8,  0,  1,  7,  1,  5,  7,  -1, -1, -1, -1, -1, -1, -1},
		{1,  5,  3,  3,  5,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{9,  7,  8,  9,  5,  7,  10, 1,  2,  -1, -1, -1, -1, -1, -1, -1},
		{10, 1,  2,  9,  5,  0,  5,  3,  0,  5,  7,  3,  -1, -1, -1, -1},
		{8,  0,  2,  8,  2,  5,  8,  5,  7,  10, 5,  2,  -1, -1, -1, -1},
		{2,  10, 5,  2,  5,  3,  3,  5,  7,  -1, -1, -1, -1, -1, -1, -1},
		{7,  9,  5,  7,  8,  9,  3,  11, 2,  -1, -1, -1, -1, -1, -1, -1},
		{9,  5,  7,  9,  7,  2,  9,  2,  0,  2,  7,  11, -1, -1, -1, -1},
		{2,  3,  11, 0,  1,  8,  1,  7,  8,  1,  5,  7,  -1, -1, -1, -1},
		{11, 2,  1,  11, 1,  7,  7,  1,  5,  -1, -1, -1, -1, -1, -1, -1},
		{9,  5,  8,  8,  5,  7,  10, 1,  3,  10, 3,  11, -1, -1, -1, -1},
		{5,  7,  0,  5,  0,  9,  7,  11, 0,  1,  0,  10, 11, 10, 0,  -1},
		{11, 10, 0,  11, 0,  3,  10, 5,  0,  8,  0,  7,  5,  7,  0,  -1},
		{11, 10, 5,  7,  11, 5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{10, 6,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  8,  3,  5,  10, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{9,  0,  1,  5,  10, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  8,  3,  1,  9,  8,  5,  10, 6,  -1, -1, -1, -1, -1, -1, -1},
		{1,  6,  5,  2,  6,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  6,  5,  1,  2,  6,  3,  0,  8,  -1, -1, -1, -1, -1, -1, -1},
		{9,  6,  5,  9,  0,  6,  0,  2,  6,  -1, -1, -1, -1, -1, -1, -1},
		{5,  9,  8,  5,  8,  2,  5,  2,  6,  3,  2,  8,  -1, -1, -1, -1},
		{2,  3,  11, 10, 6,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{11, 0,  8,  11, 2,  0,  10, 6,  5,  -1, -1, -1, -1, -1, -1, -1},
		{0,  1,  9,  2,  3,  11, 5,  10, 6,  -1, -1, -1, -1, -1, -1, -1},
		{5,  10, 6,  1,  9,  2,  9,  11, 2,  9,  8,  11, -1, -1, -1, -1},
		{6,  3,  11, 6,  5,  3,  5,  1,  3,  -1, -1, -1, -1, -1, -1, -1},
		{0,  8,  11, 0,  11, 5,  0,  5,  1,  5,  11, 6,  -1, -1, -1, -1},
		{3,  11, 6,  0,  3,  6,  0,  6,  5,  0,  5,  9,  -1, -1, -1, -1},
		{6,  5,  9,  6,  9,  11, 11, 9,  8,  -1, -1, -1, -1, -1, -1, -1},
		{5,  10, 6,  4,  7,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{4,  3,  0,  4,  7,  3,  6,  5,  10, -1, -1, -1, -1, -1, -1, -1},
		{1,  9,  0,  5,  10, 6,  8,  4,  7,  -1, -1, -1, -1, -1, -1, -1},
		{10, 6,  5,  1,  9,  7,  1,  7,  3,  7,  9,  4,  -1, -1, -1, -1},
		{6,  1,  2,  6,  5,  1,  4,  7,  8,  -1, -1, -1, -1, -1, -1, -1},
		{1,  2,  5,  5,  2,  6,  3,  0,  4,  3,  4,  7,  -1, -1, -1, -1},
		{8,  4,  7,  9,  0,  5,  0,  6,  5,  0,  2,  6,  -1, -1, -1, -1},
		{7,  3,  9,  7,  9,  4,  3,  2,  9,  5,  9,  6,  2,  6,  9,  -1},
		{3,  11, 2,  7,  8,  4,  10, 6,  5,  -1, -1, -1, -1, -1, -1, -1},
		{5,  10, 6,  4,  7,  2,  4,  2,  0,  2,  7,  11, -1, -1, -1, -1},
		{0,  1,  9,  4,  7,  8,  2,  3,  11, 5,  10, 6,  -1, -1, -1, -1},
		{9,  2,  1,  9,  11, 2,  9,  4,  11, 7,  11, 4,  5,  10, 6,  -1},
		{8,  4,  7,  3,  11, 5,  3,  5,  1,  5,  11, 6,  -1, -1, -1, -1},
		{5,  1,  11, 5,  11, 6,  1,  0,  11, 7,  11, 4,  0,  4,  11, -1},
		{0,  5,  9,  0,  6,  5,  0,  3,  6,  11, 6,  3,  8,  4,  7,  -1},
		{6,  5,  9,  6,  9,  11, 4,  7,  9,  7,  11, 9,  -1, -1, -1, -1},
		{10, 4,  9,  6,  4,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{4,  10, 6,  4,  9,  10, 0,  8,  3,  -1, -1, -1, -1, -1, -1, -1},
		{10, 0,  1,  10, 6,  0,  6,  4,  0,  -1, -1, -1, -1, -1, -1, -1},
		{8,  3,  1,  8,  1,  6,  8,  6,  4,  6,  1,  10, -1, -1, -1, -1},
		{1,  4,  9,  1,  2,  4,  2,  6,  4,  -1, -1, -1, -1, -1, -1, -1},
		{3,  0,  8,  1,  2,  9,  2,  4,  9,  2,  6,  4,  -1, -1, -1, -1},
		{0,  2,  4,  4,  2,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{8,  3,  2,  8,  2,  4,  4,  2,  6,  -1, -1, -1, -1, -1, -1, -1},
		{10, 4,  9,  10, 6,  4,  11, 2,  3,  -1, -1, -1, -1, -1, -1, -1},
		{0,  8,  2,  2,  8,  11, 4,  9,  10, 4,  10, 6,  -1, -1, -1, -1},
		{3,  11, 2,  0,  1,  6,  0,  6,  4,  6,  1,  10, -1, -1, -1, -1},
		{6,  4,  1,  6,  1,  10, 4,  8,  1,  2,  1,  11, 8,  11, 1,  -1},
		{9,  6,  4,  9,  3,  6,  9,  1,  3,  11, 6,  3,  -1, -1, -1, -1},
		{8,  11, 1,  8,  1,  0,  11, 6,  1,  9,  1,  4,  6,  4,  1,  -1},
		{3,  11, 6,  3,  6,  0,  0,  6,  4,  -1, -1, -1, -1, -1, -1, -1},
		{6,  4,  8,  11, 6,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{7,  10, 6,  7,  8,  10, 8,  9,  10, -1, -1, -1, -1, -1, -1, -1},
		{0,  7,  3,  0,  10, 7,  0,  9,  10, 6,  7,  10, -1, -1, -1, -1},
		{10, 6,  7,  1,  10, 7,  1,  7,  8,  1,  8,  0,  -1, -1, -1, -1},
		{10, 6,  7,  10, 7,  1,  1,  7,  3,  -1, -1, -1, -1, -1, -1, -1},
		{1,  2,  6,  1,  6,  8,  1,  8,  9,  8,  6,  7,  -1, -1, -1, -1},
		{2,  6,  9,  2,  9,  1,  6,  7,  9,  0,  9,  3,  7,  3,  9,  -1},
		{7,  8,  0,  7,  0,  6,  6,  0,  2,  -1, -1, -1, -1, -1, -1, -1},
		{7,  3,  2,  6,  7,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{2,  3,  11, 10, 6,  8,  10, 8,  9,  8,  6,  7,  -1, -1, -1, -1},
		{2,  0,  7,  2,  7,  11, 0,  9,  7,  6,  7,  10, 9,  10, 7,  -1},
		{1,  8,  0,  1,  7,  8,  1,  10, 7,  6,  7,  10, 2,  3,  11, -1},
		{11, 2,  1,  11, 1,  7,  10, 6,  1,  6,  7,  1,  -1, -1, -1, -1},
		{8,  9,  6,  8,  6,  7,  9,  1,  6,  11, 6,  3,  1,  3,  6,  -1},
		{0,  9,  1,  11, 6,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{7,  8,  0,  7,  0,  6,  3,  11, 0,  11, 6,  0,  -1, -1, -1, -1},
		{7,  11, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{7,  6,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{3,  0,  8,  11, 7,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  1,  9,  11, 7,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{8,  1,  9,  8,  3,  1,  11, 7,  6,  -1, -1, -1, -1, -1, -1, -1},
		{10, 1,  2,  6,  11, 7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  2,  10, 3,  0,  8,  6,  11, 7,  -1, -1, -1, -1, -1, -1, -1},
		{2,  9,  0,  2,  10, 9,  6,  11, 7,  -1, -1, -1, -1, -1, -1, -1},
		{6,  11, 7,  2,  10, 3,  10, 8,  3,  10, 9,  8,  -1, -1, -1, -1},
		{7,  2,  3,  6,  2,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{7,  0,  8,  7,  6,  0,  6,  2,  0,  -1, -1, -1, -1, -1, -1, -1},
		{2,  7,  6,  2,  3,  7,  0,  1,  9,  -1, -1, -1, -1, -1, -1, -1},
		{1,  6,  2,  1,  8,  6,  1,  9,  8,  8,  7,  6,  -1, -1, -1, -1},
		{10, 7,  6,  10, 1,  7,  1,  3,  7,  -1, -1, -1, -1, -1, -1, -1},
		{10, 7,  6,  1,  7,  10, 1,  8,  7,  1,  0,  8,  -1, -1, -1, -1},
		{0,  3,  7,  0,  7,  10, 0,  10, 9,  6,  10, 7,  -1, -1, -1, -1},
		{7,  6,  10, 7,  10, 8,  8,  10, 9,  -1, -1, -1, -1, -1, -1, -1},
		{6,  8,  4,  11, 8,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{3,  6,  11, 3,  0,  6,  0,  4,  6,  -1, -1, -1, -1, -1, -1, -1},
		{8,  6,  11, 8,  4,  6,  9,  0,  1,  -1, -1, -1, -1, -1, -1, -1},
		{9,  4,  6,  9,  6,  3,  9,  3,  1,  11, 3,  6,  -1, -1, -1, -1},
		{6,  8,  4,  6,  11, 8,  2,  10, 1,  -1, -1, -1, -1, -1, -1, -1},
		{1,  2,  10, 3,  0,  11, 0,  6,  11, 0,  4,  6,  -1, -1, -1, -1},
		{4,  11, 8,  4,  6,  11, 0,  2,  9,  2,  10, 9,  -1, -1, -1, -1},
		{10, 9,  3,  10, 3,  2,  9,  4,  3,  11, 3,  6,  4,  6,  3,  -1},
		{8,  2,  3,  8,  4,  2,  4,  6,  2,  -1, -1, -1, -1, -1, -1, -1},
		{0,  4,  2,  4,  6,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  9,  0,  2,  3,  4,  2,  4,  6,  4,  3,  8,  -1, -1, -1, -1},
		{1,  9,  4,  1,  4,  2,  2,  4,  6,  -1, -1, -1, -1, -1, -1, -1},
		{8,  1,  3,  8,  6,  1,  8,  4,  6,  6,  10, 1,  -1, -1, -1, -1},
		{10, 1,  0,  10, 0,  6,  6,  0,  4,  -1, -1, -1, -1, -1, -1, -1},
		{4,  6,  3,  4,  3,  8,  6,  10, 3,  0,  3,  9,  10, 9,  3,  -1},
		{10, 9,  4,  6,  10, 4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{4,  9,  5,  7,  6,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  8,  3,  4,  9,  5,  11, 7,  6,  -1, -1, -1, -1, -1, -1, -1},
		{5,  0,  1,  5,  4,  0,  7,  6,  11, -1, -1, -1, -1, -1, -1, -1},
		{11, 7,  6,  8,  3,  4,  3,  5,  4,  3,  1,  5,  -1, -1, -1, -1},
		{9,  5,  4,  10, 1,  2,  7,  6,  11, -1, -1, -1, -1, -1, -1, -1},
		{6,  11, 7,  1,  2,  10, 0,  8,  3,  4,  9,  5,  -1, -1, -1, -1},
		{7,  6,  11, 5,  4,  10, 4,  2,  10, 4,  0,  2,  -1, -1, -1, -1},
		{3,  4,  8,  3,  5,  4,  3,  2,  5,  10, 5,  2,  11, 7,  6,  -1},
		{7,  2,  3,  7,  6,  2,  5,  4,  9,  -1, -1, -1, -1, -1, -1, -1},
		{9,  5,  4,  0,  8,  6,  0,  6,  2,  6,  8,  7,  -1, -1, -1, -1},
		{3,  6,  2,  3,  7,  6,  1,  5,  0,  5,  4,  0,  -1, -1, -1, -1},
		{6,  2,  8,  6,  8,  7,  2,  1,  8,  4,  8,  5,  1,  5,  8,  -1},
		{9,  5,  4,  10, 1,  6,  1,  7,  6,  1,  3,  7,  -1, -1, -1, -1},
		{1,  6,  10, 1,  7,  6,  1,  0,  7,  8,  7,  0,  9,  5,  4,  -1},
		{4,  0,  10, 4,  10, 5,  0,  3,  10, 6,  10, 7,  3,  7,  10, -1},
		{7,  6,  10, 7,  10, 8,  5,  4,  10, 4,  8,  10, -1, -1, -1, -1},
		{6,  9,  5,  6,  11, 9,  11, 8,  9,  -1, -1, -1, -1, -1, -1, -1},
		{3,  6,  11, 0,  6,  3,  0,  5,  6,  0,  9,  5,  -1, -1, -1, -1},
		{0,  11, 8,  0,  5,  11, 0,  1,  5,  5,  6,  11, -1, -1, -1, -1},
		{6,  11, 3,  6,  3,  5,  5,  3,  1,  -1, -1, -1, -1, -1, -1, -1},
		{1,  2,  10, 9,  5,  11, 9,  11, 8,  11, 5,  6,  -1, -1, -1, -1},
		{0,  11, 3,  0,  6,  11, 0,  9,  6,  5,  6,  9,  1,  2,  10, -1},
		{11, 8,  5,  11, 5,  6,  8,  0,  5,  10, 5,  2,  0,  2,  5,  -1},
		{6,  11, 3,  6,  3,  5,  2,  10, 3,  10, 5,  3,  -1, -1, -1, -1},
		{5,  8,  9,  5,  2,  8,  5,  6,  2,  3,  8,  2,  -1, -1, -1, -1},
		{9,  5,  6,  9,  6,  0,  0,  6,  2,  -1, -1, -1, -1, -1, -1, -1},
		{1,  5,  8,  1,  8,  0,  5,  6,  8,  3,  8,  2,  6,  2,  8,  -1},
		{1,  5,  6,  2,  1,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  3,  6,  1,  6,  10, 3,  8,  6,  5,  6,  9,  8,  9,  6,  -1},
		{10, 1,  0,  10, 0,  6,  9,  5,  0,  5,  6,  0,  -1, -1, -1, -1},
		{0,  3,  8,  5,  6,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{10, 5,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{11, 5,  10, 7,  5,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{11, 5,  10, 11, 7,  5,  8,  3,  0,  -1, -1, -1, -1, -1, -1, -1},
		{5,  11, 7,  5,  10, 11, 1,  9,  0,  -1, -1, -1, -1, -1, -1, -1},
		{10, 7,  5,  10, 11, 7,  9,  8,  1,  8,  3,  1,  -1, -1, -1, -1},
		{11, 1,  2,  11, 7,  1,  7,  5,  1,  -1, -1, -1, -1, -1, -1, -1},
		{0,  8,  3,  1,  2,  7,  1,  7,  5,  7,  2,  11, -1, -1, -1, -1},
		{9,  7,  5,  9,  2,  7,  9,  0,  2,  2,  11, 7,  -1, -1, -1, -1},
		{7,  5,  2,  7,  2,  11, 5,  9,  2,  3,  2,  8,  9,  8,  2,  -1},
		{2,  5,  10, 2,  3,  5,  3,  7,  5,  -1, -1, -1, -1, -1, -1, -1},
		{8,  2,  0,  8,  5,  2,  8,  7,  5,  10, 2,  5,  -1, -1, -1, -1},
		{9,  0,  1,  5,  10, 3,  5,  3,  7,  3,  10, 2,  -1, -1, -1, -1},
		{9,  8,  2,  9,  2,  1,  8,  7,  2,  10, 2,  5,  7,  5,  2,  -1},
		{1,  3,  5,  3,  7,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  8,  7,  0,  7,  1,  1,  7,  5,  -1, -1, -1, -1, -1, -1, -1},
		{9,  0,  3,  9,  3,  5,  5,  3,  7,  -1, -1, -1, -1, -1, -1, -1},
		{9,  8,  7,  5,  9,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{5,  8,  4,  5,  10, 8,  10, 11, 8,  -1, -1, -1, -1, -1, -1, -1},
		{5,  0,  4,  5,  11, 0,  5,  10, 11, 11, 3,  0,  -1, -1, -1, -1},
		{0,  1,  9,  8,  4,  10, 8,  10, 11, 10, 4,  5,  -1, -1, -1, -1},
		{10, 11, 4,  10, 4,  5,  11, 3,  4,  9,  4,  1,  3,  1,  4,  -1},
		{2,  5,  1,  2,  8,  5,  2,  11, 8,  4,  5,  8,  -1, -1, -1, -1},
		{0,  4,  11, 0,  11, 3,  4,  5,  11, 2,  11, 1,  5,  1,  11, -1},
		{0,  2,  5,  0,  5,  9,  2,  11, 5,  4,  5,  8,  11, 8,  5,  -1},
		{9,  4,  5,  2,  11, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{2,  5,  10, 3,  5,  2,  3,  4,  5,  3,  8,  4,  -1, -1, -1, -1},
		{5,  10, 2,  5,  2,  4,  4,  2,  0,  -1, -1, -1, -1, -1, -1, -1},
		{3,  10, 2,  3,  5,  10, 3,  8,  5,  4,  5,  8,  0,  1,  9,  -1},
		{5,  10, 2,  5,  2,  4,  1,  9,  2,  9,  4,  2,  -1, -1, -1, -1},
		{8,  4,  5,  8,  5,  3,  3,  5,  1,  -1, -1, -1, -1, -1, -1, -1},
		{0,  4,  5,  1,  0,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{8,  4,  5,  8,  5,  3,  9,  0,  5,  0,  3,  5,  -1, -1, -1, -1},
		{9,  4,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{4,  11, 7,  4,  9,  11, 9,  10, 11, -1, -1, -1, -1, -1, -1, -1},
		{0,  8,  3,  4,  9,  7,  9,  11, 7,  9,  10, 11, -1, -1, -1, -1},
		{1,  10, 11, 1,  11, 4,  1,  4,  0,  7,  4,  11, -1, -1, -1, -1},
		{3,  1,  4,  3,  4,  8,  1,  10, 4,  7,  4,  11, 10, 11, 4,  -1},
		{4,  11, 7,  9,  11, 4,  9,  2,  11, 9,  1,  2,  -1, -1, -1, -1},
		{9,  7,  4,  9,  11, 7,  9,  1,  11, 2,  11, 1,  0,  8,  3,  -1},
		{11, 7,  4,  11, 4,  2,  2,  4,  0,  -1, -1, -1, -1, -1, -1, -1},
		{11, 7,  4,  11, 4,  2,  8,  3,  4,  3,  2,  4,  -1, -1, -1, -1},
		{2,  9,  10, 2,  7,  9,  2,  3,  7,  7,  4,  9,  -1, -1, -1, -1},
		{9,  10, 7,  9,  7,  4,  10, 2,  7,  8,  7,  0,  2,  0,  7,  -1},
		{3,  7,  10, 3,  10, 2,  7,  4,  10, 1,  10, 0,  4,  0,  10, -1},
		{1,  10, 2,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{4,  9,  1,  4,  1,  7,  7,  1,  3,  -1, -1, -1, -1, -1, -1, -1},
		{4,  9,  1,  4,  1,  7,  0,  8,  1,  8,  7,  1,  -1, -1, -1, -1},
		{4,  0,  3,  7,  4,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{4,  8,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{9,  10, 8,  10, 11, 8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{3,  0,  9,  3,  9,  11, 11, 9,  10, -1, -1, -1, -1, -1, -1, -1},
		{0,  1,  10, 0,  10, 8,  8,  10, 11, -1, -1, -1, -1, -1, -1, -1},
		{3,  1,  10, 11, 3,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  2,  11, 1,  11, 9,  9,  11, 8,  -1, -1, -1, -1, -1, -1, -1},
		{3,  0,  9,  3,  9,  11, 1,  2,  9,  2,  11, 9,  -1, -1, -1, -1},
		{0,  2,  11, 8,  0,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{3,  2,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{2,  3,  8,  2,  8,  10, 10, 8,  9,  -1, -1, -1, -1, -1, -1, -1},
		{9,  10, 2,  0,  9,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{2,  3,  8,  2,  8,  10, 0,  1,  8,  1,  10, 8,  -1, -1, -1, -1},
		{1,  10, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{1,  3,  8,  9,  1,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  9,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{0,  3,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
};





void MarchingCubes(const Grid &g, Mesh &m) {
	auto at = [&](int x, int y, int z) {
		auto d = g.dimension;
		if (x >= d || y >= d || z >= d) return 0u;
		if (x < 0 || y < 0 || z < 0) return 0u;
		return (unsigned) g.voxels[z + d * (y + d * x)];
	};

	auto atColor = [&](int x, int y, int z) {
		auto d = g.dimension;
		if (x >= d || y >= d || z >= d) return RGB{ 0, 0, 0, 0 };
		if (x < 0 || y < 0 || z < 0) return RGB{ 0, 0, 0, 0 };
		return *reinterpret_cast<const RGB*>(&g.voxelsColor[z + d * (y + d * x)]);
	};

	float voxelWidth = g.x_length / g.dimension;
	float voxelHeight = g.y_length / g.dimension;
	float voxelDepth = g.z_length / g.dimension;

	float startX = -g.x_length / 2;
	float startY = -g.y_length / 2;
	float startZ = -g.z_length / 2;

	// The MC-grid is offset by 0.5 voxels from the voxel grid. That means: the centers of voxels (where the values are)
	// are the corners of the MC-grid. For this reason, the grid resolution is one greater than the voxel resolution.
	for (int i = -1; i < g.dimension; i++) {
		auto x_min = startX + i * voxelWidth;
		auto x_max = startX + (i + 1) * voxelWidth;
		auto x_mid = startX + (i + 0.5f) * voxelWidth;
		for (int j = -1; j < g.dimension; j++) {
			auto y_min = startY + j * voxelHeight;
			auto y_max = startY + (j + 1) * voxelHeight;
			auto y_mid = startY + (j + 0.5f) * voxelHeight;
			for (int k = -1; k < g.dimension; k++) {
				auto z_min = startZ + k * voxelDepth;
				auto z_max = startZ + (k + 1) * voxelDepth;
				auto z_mid = startZ + (k + 0.5f) * voxelDepth;

				/* Useless oversized diagram:
				 *        6-----------7 max
				 *       /|          /|
				 *      / |         / |
				 *     2--+--------3  |
				 *     |  |        |  |
				 *     |  5--------+--4
				 *     | /         | /
				 *     |/          |/
				 * min 1-----------0
				 */

				// ijk is the min-corner-voxel. ijk+111 is max.
				unsigned lut_index = 0;
				lut_index |= at(i + 1, j, k) << 0u;
				lut_index |= at(i, j, k) << 1u;
				lut_index |= at(i, j + 1, k) << 2u;
				lut_index |= at(i + 1, j + 1, k) << 3u;
				lut_index |= at(i + 1, j, k + 1) << 4u;
				lut_index |= at(i, j, k + 1) << 5u;
				lut_index |= at(i, j + 1, k + 1) << 6u;
				lut_index |= at(i + 1, j + 1, k + 1) << 7u;

				std::array<std::array<float, 3>, 12> edges = {
						std::array{x_mid, y_min, z_min},
						std::array{x_min, y_mid, z_min},
						std::array{x_mid, y_max, z_min},
						std::array{x_max, y_mid, z_min},
						std::array{x_mid, y_min, z_max},
						std::array{x_min, y_mid, z_max},
						std::array{x_mid, y_max, z_max},
						std::array{x_max, y_mid, z_max},
						std::array{x_max, y_min, z_mid},
						std::array{x_min, y_min, z_mid},
						std::array{x_min, y_max, z_mid},
						std::array{x_max, y_max, z_mid},
				};

				/*std::array<std::array<int, 3>, 12> colors = {
					//interpolate the color of the voxels
						std::array{(atColor(i , j, k).red+ atColor(i + 1, j, k).red)/2, (atColor(i , j, k).green + atColor(i + 1, j, k).green) / 2,(atColor(i , j, k).blue + atColor(i + 1, j, k).blue) / 2}, //interpolate 1 and 0
						std::array{(atColor(i , j, k).red + atColor(i, j, k + 1).red) / 2, (atColor(i , j, k).green + atColor(i, j, k + 1).green) / 2,(atColor(i , j, k).blue + atColor(i, j, k + 1).blue) / 2}, //interpolate 1 and 5
						std::array{(atColor(i + 1, j, k + 1).red + atColor(i, j, k + 1).red) / 2, (atColor(i + 1, j, k + 1).green + atColor(i, j, k + 1).green) / 2,(atColor(i + 1, j, k + 1).blue + atColor(i, j, k + 1).blue) / 2},//interpolate 5 and 4
						std::array{(atColor(i + 1, j, k + 1).red + atColor(i + 1, j, k).red) / 2, (atColor(i + 1, j, k + 1).green + atColor(i + 1, j, k).green) / 2,(atColor(i + 1, j, k + 1).blue + atColor(i + 1, j, k).blue) / 2}, //interpolate 0 and 4
						std::array{(atColor(i, j + 1, k).red + atColor(i + 1, j + 1, k).red) / 2, (atColor(i, j + 1, k).green + atColor(i + 1, j + 1, k).green) / 2,(atColor(i, j + 1, k).blue + atColor(i + 1, j + 1, k).blue) / 2}, //interpolate 2 and 3
						std::array{(atColor(i, j + 1, k).red + atColor(i, j + 1, k + 1).red) / 2, (atColor(i, j + 1, k).green + atColor(i, j + 1, k + 1).green) / 2,(atColor(i, j + 1, k).blue + atColor(i, j + 1, k + 1).blue) / 2}, //interpolate 2 and 6
						std::array{(atColor(i + 1, j + 1, k + 1).red + atColor(i, j + 1, k + 1).red) / 2, (atColor(i + 1, j + 1, k + 1).green + atColor(i, j + 1, k + 1).green) / 2,(atColor(i + 1, j + 1, k + 1).blue + atColor(i, j + 1, k + 1).blue) / 2}, //interpolate 6 and 7
						std::array{(atColor(i + 1, j + 1, k + 1).red + atColor(i + 1, j + 1, k).red) / 2, (atColor(i + 1, j + 1, k + 1).green + atColor(i + 1, j + 1, k).green) / 2,(atColor(i + 1, j + 1, k + 1).blue + atColor(i + 1, j + 1, k).blue) / 2}, //interpolate 3 and 7
						std::array{(atColor(i + 1, j, k).red + atColor(i + 1, j + 1, k).red) / 2, (atColor(i + 1, j, k).green + atColor(i + 1, j + 1, k).green) / 2,(atColor(i + 1, j, k).blue + atColor(i + 1, j + 1, k).blue) / 2}, //interpolate 0 and 3 
						std::array{(atColor(i , j, k).red + atColor(i, j + 1, k).red) / 2, (atColor(i , j, k).green + atColor(i, j + 1, k).green) / 2,(atColor(i , j, k).blue + atColor(i, j + 1, k).blue) / 2}, //interpolate 1 and 2
						std::array{(atColor(i, j, k + 1).red + atColor(i, j + 1, k + 1).red) / 2, (atColor(i, j, k + 1).green + atColor(i, j + 1, k + 1).green) / 2,(atColor(i, j, k + 1).blue + atColor(i, j + 1, k + 1).blue) / 2},  //interpolate 5 and 6
						std::array{(atColor(i + 1, j + 1, k + 1).red + atColor(i + 1, j, k + 1).red) / 2, (atColor(i + 1, j + 1, k + 1).green + atColor(i + 1, j, k + 1).green) / 2,(atColor(i + 1, j + 1, k + 1).blue + atColor(i + 1, j, k + 1).blue) / 2}, //interpolate 4 and 7
						

						
				};
				*/
				std::array<std::array<int, 3>, 8> cornerColors = {
					
						std::array<int, 3>{atColor(i + 1, j, k).red, atColor(i + 1 , j, k).green, atColor(i + 1, j, k).blue}, //color of corner 0
						std::array<int, 3>{atColor(i, j, k).red, atColor(i, j, k).green, atColor(i, j, k).blue}, //color of corner 1
						std::array<int, 3>{atColor(i, j + 1, k).red, atColor(i, j + 1, k).green, atColor(i, j + 1, k).blue}, //color of corner 2
						std::array<int, 3>{atColor(i + 1, j + 1, k).red, atColor(i + 1, j + 1, k).green, atColor(i + 1, j + 1, k).blue}, //color of corner 3
						std::array<int, 3>{atColor(i + 1, j, k + 1).red, atColor(i + 1, j, k + 1).green, atColor(i + 1, j, k + 1).blue}, //color of corner 4
						std::array<int, 3>{atColor(i, j, k + 1).red, atColor(i, j, k + 1).green, atColor(i, j, k + 1).blue}, //color of corner 5
						std::array<int, 3>{atColor(i, j + 1, k + 1).red, atColor(i, j + 1, k + 1).green, atColor(i, j + 1, k + 1).blue}, //color of corner 6
						std::array<int, 3>{atColor(i + 1, j + 1, k + 1).red, atColor(i + 1, j + 1, k + 1).green, atColor(i + 1, j + 1, k + 1).blue}, //color of corner 7

				};


				auto &lut = triTable[lut_index & 0xFFu]; // stupid table being inverted...
				for (size_t v = 0; lut[v] >= 0; v += 3) {
					auto v1 = m.AddVertex(edges[lut[v + 0]]);
					auto v2 = m.AddVertex(edges[lut[v + 1]]);
					auto v3 = m.AddVertex(edges[lut[v + 2]]);
					m.AddFace(v1, v2, v3);

					//add corner, which are inside the surface to the list
					std::list<int> cornerList;
					for (int i = 0; i < 8; i++) {
						if ((lut_index & (1 << i)) >> i) {
							cornerList.push_back(i);
						}
					}
					
					int interRed=0;
					int interGreen=0;
					int interBlue=0;
					//interpolation
					for (auto& corner :  cornerList) {
						interRed += cornerColors[corner][0];
						interGreen += cornerColors[corner][1];
						interBlue += cornerColors[corner][2];
					}
					interRed /= cornerList.size();
					interGreen /= cornerList.size();
					interBlue /= cornerList.size();

					m.AddFaceColor(
						static_cast<uint8_t>(interRed), 
						static_cast<uint8_t>(interGreen),
						static_cast<uint8_t>(interBlue));
				}
			}
		}
	}
}
